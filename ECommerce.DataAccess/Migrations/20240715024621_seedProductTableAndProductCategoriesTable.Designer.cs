// <auto-generated />
using System;
using ECommerce.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerce.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20240715024621_seedProductTableAndProductCategoriesTable")]
    partial class seedProductTableAndProductCategoriesTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerce.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("ECommerce.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Clothing & Apparel"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Home & Kitchen"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Health & Beauty"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sports & Outdoors"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Books & Media"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Toys & Games"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Automotive"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Pets"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Jewelry & Accessories"
                        });
                });

            modelBuilder.Entity("ECommerce.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BriefDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BriefDescription = "Twin Lens Camera",
                            Description = "Twin Lens Camera",
                            ImageUrl = "images\\product\\e30fdaf9-489c-4a4c-b933-ef698f1d28e0.jpg",
                            Name = "Twin Lens Camera",
                            Price = 1000.0
                        },
                        new
                        {
                            Id = 2,
                            BriefDescription = "Compact SLR Camera",
                            Description = "Compact SLR Camera",
                            ImageUrl = "images\\product\\cedff5d3-ed2a-4b6b-8157-3e0293eb61bd.jpg",
                            Name = "Compact SLR Camera",
                            Price = 1000.0
                        },
                        new
                        {
                            Id = 3,
                            BriefDescription = "Nikkormat SLR Camera",
                            Description = "Nikkormat SLR Camera",
                            ImageUrl = "images\\product\\092b7d67-1010-43b9-8c4f-f8f674947edf.jpg",
                            Name = "Nikkormat SLR Camera",
                            Price = 1900.0
                        },
                        new
                        {
                            Id = 4,
                            BriefDescription = "Compact Digital Camera",
                            Description = "Compact Digital Camera",
                            ImageUrl = "images\\product\\b7f4cb2c-42c5-43c8-b41d-61d63a7d95f2.jpg",
                            Name = "Compact Digital Camera",
                            Price = 1900.0
                        },
                        new
                        {
                            Id = 5,
                            BriefDescription = "Instamatic Camera",
                            Description = "Instamatic Camera",
                            ImageUrl = "images\\product\\43d302da-06bb-4b78-a55b-822ecb114257.jpg",
                            Name = "Instamatic Camera",
                            Price = 1900.0
                        },
                        new
                        {
                            Id = 6,
                            BriefDescription = "Tripod",
                            Description = "Tripod",
                            ImageUrl = "images\\product\\5ad3224c-b2ba-425c-8973-6ea79a8bd940.jpg",
                            Name = "Tripod",
                            Price = 1000.0
                        },
                        new
                        {
                            Id = 7,
                            BriefDescription = "Vintage Folding Camera",
                            Description = "Vintage Folding Camera",
                            ImageUrl = "images\\product\\cb38d263-938a-48dd-87b9-05b458ca3032.jpg",
                            Name = "Vintage Folding Camera",
                            Price = 1000.0
                        },
                        new
                        {
                            Id = 8,
                            BriefDescription = "Camera Lens",
                            Description = "Camera Lens",
                            ImageUrl = "images\\product\\9aa2a2b5-ded2-4bbe-b97d-a09095fa02d5.jpg",
                            Name = "Camera Lens",
                            Price = 1000.0
                        },
                        new
                        {
                            Id = 9,
                            BriefDescription = "Instant Camera",
                            Description = "Instant Camera",
                            ImageUrl = "images\\product\\2ceab055-200f-4817-bd5f-52d12ce09921.jpg",
                            Name = "Instant Camera",
                            Price = 1000.0
                        },
                        new
                        {
                            Id = 10,
                            BriefDescription = "USB Cable",
                            Description = "USB Cable",
                            ImageUrl = "images\\product\\48ff9ac1-006f-4a81-8847-2357cd648ed4.jpg",
                            Name = "USB Cable",
                            Price = 1600.0
                        },
                        new
                        {
                            Id = 11,
                            BriefDescription = "Ethernet Cable",
                            Description = "Ethernet Cable",
                            ImageUrl = "images\\product\\f88f2194-1e60-411a-b268-2eae125705d5.jpg",
                            Name = "Ethernet Cable",
                            Price = 100.0
                        },
                        new
                        {
                            Id = 12,
                            BriefDescription = "Clacky Keyboard",
                            Description = "Clacky Keyboard",
                            ImageUrl = "images\\product\\daf3a747-30fb-4841-96e0-9f64084307ef.jpg",
                            Name = "Clacky Keyboard",
                            Price = 1000.0
                        },
                        new
                        {
                            Id = 13,
                            BriefDescription = "Hard Drive",
                            Description = "Hard Drive",
                            ImageUrl = "images\\product\\6e13c1da-a19b-4827-88ba-91498e3f2241.jpg",
                            Name = "Hard Drive",
                            Price = 1000.0
                        },
                        new
                        {
                            Id = 14,
                            BriefDescription = "Gaming PC",
                            Description = "Gaming PC",
                            ImageUrl = "images\\product\\4ac6662f-639d-480b-b318-8875943321e5.jpg",
                            Name = "Gaming PC",
                            Price = 1000.0
                        },
                        new
                        {
                            Id = 15,
                            BriefDescription = "High Performance RAM",
                            Description = "High Performance RAM",
                            ImageUrl = "images\\product\\accc318f-38df-4c5f-a0f5-91c98948a2ea.jpg",
                            Name = "High Performance RAM",
                            Price = 1000.0
                        },
                        new
                        {
                            Id = 16,
                            BriefDescription = "Curvy Monitor",
                            Description = "Curvy Monitor",
                            ImageUrl = "images\\product\\1497ba90-2c8a-4a71-90f2-c970e1a0214f.jpg",
                            Name = "Curvy Monitor",
                            Price = 1000.0
                        },
                        new
                        {
                            Id = 17,
                            BriefDescription = "32-Inch Monitor",
                            Description = "32-Inch Monitor",
                            ImageUrl = "images\\product\\f990bf34-3cbf-47ac-a0d0-296d3f282474.jpg",
                            Name = "32-Inch Monitor",
                            Price = 1900.0
                        },
                        new
                        {
                            Id = 18,
                            BriefDescription = "Wireless Optical Mouse",
                            Description = "Wireless Optical Mouse",
                            ImageUrl = "images\\product\\5aa66166-310c-435e-bafa-5f6d8f9ca384.jpg",
                            Name = "Wireless Optical Mouse",
                            Price = 1000.0
                        },
                        new
                        {
                            Id = 19,
                            BriefDescription = "Tablet",
                            Description = "Tablet",
                            ImageUrl = "images\\product\\25cf7661-618f-4281-bcd3-c3814e1e5aba.jpg",
                            Name = "Tablet",
                            Price = 1000.0
                        },
                        new
                        {
                            Id = 20,
                            BriefDescription = "Laptop",
                            Description = "Laptop",
                            ImageUrl = "images\\product\\771af035-72f6-42c7-998b-b38f3775e99d.jpg",
                            Name = "Laptop",
                            Price = 1000.0
                        },
                        new
                        {
                            Id = 21,
                            BriefDescription = "Grey Fabric Sofa",
                            Description = "Grey Fabric Sofa",
                            ImageUrl = "images\\product\\66f06846-c2f6-45be-aa6e-6c428fcf3396.jpg",
                            Name = "Grey Fabric Sofa",
                            Price = 1000.0
                        },
                        new
                        {
                            Id = 22,
                            BriefDescription = "Hi-Top Basketball Shoe",
                            Description = "Hi-Top Basketball Shoe",
                            ImageUrl = "images\\product\\45bd9afc-91ad-45d2-ab0a-2fee340b7dc6.jpg",
                            Name = "Hi-Top Basketball Shoe",
                            Price = 250.0
                        });
                });

            modelBuilder.Entity("ECommerce.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId", "CategoryId")
                        .IsUnique();

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 20,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 21,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 22,
                            CategoryId = 5
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ECommerce.Models.Cart", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerce.Models.ProductCategory", b =>
                {
                    b.HasOne("ECommerce.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Models.Product", "Product")
                        .WithMany("Category")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Models.Product", b =>
                {
                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
